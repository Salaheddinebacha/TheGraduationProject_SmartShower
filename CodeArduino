
const int button1Pin = 2; // Pin for the button to cycle through durations
const int button2Pin = 4; // Pin for the button to select duration and start shower
const int buzzerPin = 3;  // Pin for the piezo buzzer
const int solenoidValvePin = A5; // Pin for the solenoid valve
const int flowSensor1Pin = 5; // Pin for the first flow sensor
const int flowSensor2Pin = 6; // Pin for the second flow sensor

#include <LiquidCrystal.h>

// Initialize the LCD library with the pins you're using
LiquidCrystal lcd(7, 8, 9, 10, 11, 12);

// Durations in minutes
const int durations[] = {1, 3, 5, 10, 15};
const int numDurations = sizeof(durations) / sizeof(int);
int currentDuration = 0;
unsigned long showerEndTime = 0;
bool warmupCountdown = false;
unsigned long warmupEndTime = 0;
bool durationSelected = false;
bool buzzedFor30Seconds = false;

volatile unsigned int flowSensor1Pulses = 0; // Variable to store the pulses from the first flow sensor
volatile unsigned int flowSensor2Pulses = 0; // Variable to store the pulses from the second flow sensor
unsigned long flowSensorStartTime = 0; // Time when the flow sensors started recording pulses

void flowSensor1Interrupt() {
  flowSensor1Pulses++;
}

void flowSensor2Interrupt() {
  flowSensor2Pulses++;
}

void setup() {
  pinMode(button1Pin, INPUT_PULLUP);
  pinMode(button2Pin, INPUT_PULLUP);
  pinMode(buzzerPin, OUTPUT);
  pinMode(solenoidValvePin, OUTPUT); // Set the solenoid valve pin as an output
  pinMode(flowSensor1Pin, INPUT_PULLUP); // Set the flow sensor 1 pin as an input with internal pull-up resistor
  pinMode(flowSensor2Pin, INPUT_PULLUP); // Set the flow sensor 2 pin as an input with internal pull-up resistor
  attachInterrupt(digitalPinToInterrupt(flowSensor1Pin), flowSensor1Interrupt, FALLING); // Attach an interrupt to the flow sensor 1 pin
  attachInterrupt(digitalPinToInterrupt(flowSensor2Pin), flowSensor2Interrupt, FALLING); // Attach an interrupt to the flow sensor 2 pin
  lcd.begin(16, 2);
  lcd.setCursor(0, 0); // Set cursor to the first column of the first row
  lcd.print("Selectionner");
  lcd.setCursor(0, 1); // Set cursor to the first column of the second row
  lcd.print("la duree");
}
void sendStartTime() {
  Serial.print("START:");
  Serial.println(millis()); // Send the start time in milliseconds
}

void sendEndTime() {
  Serial.print("END:");
  Serial.println(millis()); // Send the end time in milliseconds
}
void loop() {
  if (digitalRead(button1Pin) == LOW) {
    delay(50); // Debounce delay
    currentDuration = (currentDuration + 1) % numDurations;
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to the first column of the first row
    lcd.print("Duree: ");
    lcd.print(durations[currentDuration]);
    lcd.print(" mins");
    durationSelected = true;
  }

  if (digitalRead(button2Pin) == LOW && durationSelected) {
    delay(50); // Debounce delay
    warmupCountdown = true;
    warmupEndTime = millis() + 20000; // Set the warmup end time (20 seconds from now)
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to the first column of the first row
    lcd.print("Eau Chauffee !");
    digitalWrite(solenoidValvePin, HIGH); // Open the solenoid valve during warmup
    buzzedFor30Seconds = false; // Reset the buzzer flag
  }

  if (warmupCountdown && millis() >= warmupEndTime) {
    showerEndTime = millis() + durations[currentDuration] * 60000; // Calculate the end time in milliseconds
    warmupCountdown = false;
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to the first column of the first row
    lcd.print("Douche commencee");
    flowSensorStartTime = millis(); // Record the start time for the flow sensors
    sendStartTime(); // Send the start time to the ESP32
  }

  if (showerEndTime != 0 && millis() >= showerEndTime) {
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to the first column of the first row
    lcd.print("Douche Terminee");
    delay(3000); // Wait 3 seconds
    lcd.clear();

    // Check for water leak
    unsigned long flowSensorDuration = millis() - flowSensorStartTime; // Calculate the duration for which the flow sensors were recording
    float flowSensor1Rate = (float)flowSensor1Pulses / flowSensorDuration * 60000; // Calculate the flow rate in L/min for the first sensor
    float flowSensor2Rate = (float)flowSensor2Pulses / flowSensorDuration * 60000; // Calculate the flow rate in L/min for the second sensor

    if (abs(flowSensor1Rate - flowSensor2Rate) >= 1.0 && flowSensorDuration >= 60000) { // Adjust the threshold as needed
      lcd.setCursor(0, 0); // Set cursor to the first column of the first row
      lcd.print("Fuite d'eau !");
    }

    lcd.setCursor(0, 1); // Set cursor to the first column of the second row
    lcd.print("Litres: ");
    lcd.print(max(flowSensor1Pulses, flowSensor2Pulses)); // Display the higher value as the water consumption

    showerEndTime = 0; // Reset the end time
    durationSelected = false; // Reset the duration selection
    buzzedFor30Seconds = false; // Reset the buzzer flag
    digitalWrite(solenoidValvePin, LOW); // Close the solenoid valve
    flowSensor1Pulses = 0; // Reset the flow sensor 1 pulse count
    flowSensor2Pulses = 0; // Reset the flow sensor 2 pulse count
    flowSensorStartTime = 0; // Reset the flow sensor start time
    sendEndTime(); // Send the end time to the ESP32
    delay(5000); // Wait for 5 seconds before clearing the LCD
    lcd.clear();
    lcd.setCursor(0, 0); // Set cursor to the first column of the first row
    lcd.print("Bonne Journee !");
  }

  // Code for buzzer and remaining time display remains the same
  if (showerEndTime != 0 && millis() >= showerEndTime - 30000 && millis() < showerEndTime && !buzzedFor30Seconds) {
    // Activate the buzzer when there are 30 seconds remaining
    digitalWrite(buzzerPin, HIGH); // Turn on the buzzer
    delay(3000); // Buzz for 3 seconds
    digitalWrite(buzzerPin, LOW); // Turn off the buzzer
    buzzedFor30Seconds = true; // Set the flag to indicate that the buzzer has buzzed for 30 seconds
  }

  if (warmupCountdown) {
    unsigned long remainingTime = warmupEndTime - millis();
    int remainingSeconds = remainingTime / 1000;
    lcd.setCursor(0, 1); // Set cursor to the first column of the second row
    lcd.print("Temps Res: ");
    if (remainingSeconds < 10) {
      lcd.print("0");
    }
    lcd.print(remainingSeconds);
  } else if (showerEndTime != 0) {
    unsigned long remainingTime = showerEndTime - millis();
    int remainingMinutes = remainingTime / 60000;
    int remainingSeconds = (remainingTime / 1000) % 60;
    lcd.setCursor(0, 1); // Set cursor to the first column of the second row
    lcd.print("Temps Res: ");
    lcd.print(remainingMinutes);
    lcd.print(":");
    if (remainingSeconds < 10) {
      lcd.print("0");
    }
    lcd.print(remainingSeconds);
  }
}
